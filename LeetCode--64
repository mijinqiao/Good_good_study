64. 最小路径和
https://leetcode-cn.com/problems/minimum-path-sum/

给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。

说明：每次只能向下或者向右移动一步。
示例 1：
输入：grid = [[1,3,1],[1,5,1],[4,2,1]]
输出：7
解释：因为路径 1→3→1→1→1 的总和最小。
示例 2：

输入：grid = [[1,2,3],[4,5,6]]
输出：12
 

提示：

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 100

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-path-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
python3 language
def minPathSum(self, grid: List[List[int]]) -> int:
      lenr = len(grid)
      lenc = len(grid[0])
      res = []
      f = [[[] for i in range(lenc)] for j in range(lenr)]
      f[0][0] = grid[0][0]
      for i in range(1,lenc):
          f[0][i] = f[0][i-1] + grid[0][i]
      #上边界单独处理，只能从左边到达
      for i in range(1,lenr):
          f[i][0] = f[i-1][0] + grid[i][0]
      #左边界单独处理，只能从上边到达
      for i in range(1,lenr):
          for j in range(1,lenc):
              f[i][j] = f[i-1][j] + grid[i][j] if f[i-1][j]<f[i][j-1] else f[i][j-1] + grid[i][j]
      #到达grid[i][j]要花费f[i][j]=min(f[i-1][j]+gird[i][j],f[i][j-1]+gird[i][j]的时间
      #到达grid[i][j]有两条路，从上边到达，和从左边到达，我们选最小的路
      return f[lenr-1][lenc-1]
        
        
